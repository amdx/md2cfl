# md2cfl - MagicDraw to Confluence importer
# Copyright (C) 2022  Archimedes Exhibitions GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
import os
import logging
import argparse
import getpass

import keyring

from md2cfl import confluence_api, report_parser, processor, prefs

AMDX_LOG_FORMAT = '[%(asctime)s] {%(name)s:%(lineno)d} %(levelname)s: %(message)s'

logger = logging.getLogger(__name__)


def parse_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands', dest='command')
    subparsers.required = True

    run_subparser = subparsers.add_parser('run', help='Run the import to confluence')

    run_subparser.add_argument('report',
                               help='XML generated by MD via the provided '
                                    'exporter report template')
    run_subparser.add_argument('--user', '-u',
                               default=None,
                               help='Confluence user for publishing')
    run_subparser.add_argument('--password', '-p',
                               default=None,
                               help='Confluence password')
    run_subparser.add_argument('--url',
                               default='https://confluence.archimedes-exhibitions.de/',
                               help='Confluence base url')
    run_subparser.add_argument('--skip-restrictions', action='store_true',
                               help='Do not apply read-only page restrictions '
                                    'to the root page/s')
    run_subparser.add_argument('--force-updates', action='store_true',
                               help='Unconditionally update all the pages and '
                                    'diagrams')
    run_subparser.add_argument('--delete-children', action='store_true',
                               help='Delete all children of the top-level pages '
                                    'before populating them')
    run_subparser.add_argument('--verbose', '-v', action='count', default=0,
                               help='Increase verbosity')
    run_subparser.add_argument('--quiet', '-q', action='store_true',
                               help='Skip import summary and progress')
    run_subparser.set_defaults(func=run)

    login_subparser = subparsers.add_parser('login',
                                            help='Add a credential set to the keyring')
    login_subparser.add_argument('username',
                                 help='Confluence username')
    login_subparser.set_defaults(func=login)

    logout_subparser = subparsers.add_parser('logout',
                                            help='Remove savd login information')
    logout_subparser.add_argument('username',
                                 help='Confluence username')
    logout_subparser.set_defaults(func=logout)

    validate_subparser = subparsers.add_parser('validate',
                                               help='Validate report against schema')
    validate_subparser.add_argument('report',
                                    help='Report XML')
    validate_subparser.set_defaults(func=validate)

    return parser.parse_args()


def init_logger(level):
    logging.basicConfig(level=level, format=AMDX_LOG_FORMAT)


def retrieve_credentials(args):
    preferences = prefs.Prefs()

    if args.user:
        user = args.user
    elif os.environ.get('MDIMPORTER_USERNAME'):
        user = os.environ.get('MDIMPORTER_USERNAME')
    elif preferences.data.get('user'):
        user = preferences.data['user']
    else:
        logger.error('No user has been specified')
        sys.exit(2)

    if args.password:
        password = args.password
    elif os.environ.get('MDIMPORTER_PASSWORD'):
        password = os.environ.get('MDIMPORTER_PASSWORD')
    elif keyring.get_password('system', user):
        password = keyring.get_password('system', user)
    elif preferences.data.get('password'):
        password = preferences.data['password']
    else:
        logger.error('No password has been specified')
        sys.exit(2)

    return user, password


def run(args):
    if args.verbose >= 2:
        level = logging.DEBUG
    elif args.verbose == 1:
        level = logging.INFO
    else:
        level = logging.WARNING

    init_logger(level)

    user, password = retrieve_credentials(args)

    cfl = confluence_api.ConfluenceAPI(user=user,
                                       password=password,
                                       base_url=args.url)

    version_info, report = report_parser.parse(args.report)

    if report is None:
        sys.exit(1)

    p = processor.Processor(cfl=cfl,
                            version_info=version_info,
                            report=report,
                            skip_restrictions=args.skip_restrictions,
                            force_updates=args.force_updates,
                            delete_children=args.delete_children,
                            print_summary=not args.quiet and args.verbose == 0)
    p.process()


def login(args):
    init_logger(logging.INFO)
    preferences = prefs.Prefs()

    preferences.data['user'] = args.username

    logger.info(f'Enter the password for user {args.username}')

    password = getpass.getpass()
    password_check = getpass.getpass('Repeat password: ')

    if password != password_check:
        logger.error('Passwords do not match')
        sys.exit(2)

    try:
        keyring.set_password('system', args.username, password)
    except Exception as e:
        logger.warning(f'Cannot save the password into a keyring, the password '
                       f'will be stored unencrypted err={e}')
        preferences.data['password'] = password
    else:
        logger.info('Password stored in the keyring')

    preferences.save()

    logger.info('Credentials stored')


def logout(args):
    init_logger(logging.INFO)
    preferences = prefs.Prefs()

    if 'user' in preferences.data and args.username == preferences.data.get('user'):
        del preferences.data['user']
        logger.info('Removed stored user from the preferences')

        if 'password' in preferences.data:
            del preferences.data['password']
            logger.info('Removed stored password from the preferences')

        preferences.save()

    try:
        keyring.delete_password('system', args.username)
        logger.info('Removed stored password from the keyring')
    except Exception:
        pass


def validate(args):
    from . import report_parser

    init_logger(level=logging.INFO)
    version_info, report = report_parser.parse(args.report)

    if version_info:
        logger.info(f'Validation successful. Version info: {version_info}')


def main():
    args = parse_args()

    args.func(args)
